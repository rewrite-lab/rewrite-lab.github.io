<!-- Language Toggle -->
<div class="language-toggle">
  <button id="lang-kr" class="lang-btn active" onclick="setLanguage('kr')">
    🇰🇷 KR
  </button>
  <button id="lang-en" class="lang-btn" onclick="setLanguage('en')">
    🇺🇸 ENG
  </button>
</div>

<div id="archive">
  <ul class="post-list">
    <% var year = 0 %> <% var change = false %> <% var field_sort =
    theme.archive.sort_updated ? 'updated' : 'date' %> <%
    page.posts.sort(field_sort, 'desc').each(function(post) { %> <% var itemYear
    = date(post[field_sort], 'YYYY') %> <% change = year !== itemYear %> <% year
    = change ? itemYear : year %> <% if (change) { %>
    <li class="post-year"><h2><%= year %></h2></li>
    <% } %>
    <li class="post-item" data-language="<%= post.language || 'en' %>">
      <%- partial('_partial/post/date', { post: post, class_name: 'meta' }) %>
      <span
        ><%- partial('_partial/post/title', { post: post, index: true,
        class_name: '' }) %></span
      >
    </li>
    <% }); %>
  </ul>
  <%- partial('_partial/pagination') %>
</div>

<style>
  /* Language Toggle Styles */
  .language-toggle {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 2rem;
    padding: 1rem;
  }

  .lang-btn {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid #105a23;
    color: #00ff41;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: "Courier New", monospace;
  }

  .lang-btn:hover {
    background: rgba(0, 255, 65, 0.1);
    box-shadow: 0 0 10px rgba(0, 255, 65, 0.3);
  }

  .lang-btn.active {
    background: rgba(0, 255, 65, 0.2);
    box-shadow: 0 0 15px rgba(0, 255, 65, 0.4);
  }

  .post-item {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .post-item.hidden {
    display: none;
  }
</style>

<script>
  // 현재 선택된 언어
  let currentLanguage = "kr"; // 기본값을 한국어로 설정

  // 국가 감지 함수
  async function detectCountry() {
    try {
      const response = await fetch("https://ipapi.co/json/");
      const data = await response.json();

      console.log("Detected country:", data.country_code);

      if (data.country_code === "KR") {
        return "kr";
      } else {
        return "en";
      }
    } catch (error) {
      console.log("Country detection failed, using browser language");

      const browserLang = navigator.language || navigator.userLanguage;
      if (browserLang.startsWith("ko")) {
        return "kr";
      } else {
        return "en";
      }
    }
  }

  // 언어 설정 함수
  function setLanguage(lang) {
    currentLanguage = lang;

    // 버튼 상태 업데이트
    document.querySelectorAll(".lang-btn").forEach((btn) => {
      btn.classList.remove("active");
    });

    // 올바른 언어 버튼 ID 찾기
    const targetBtnId = lang === "kr" ? "lang-kr" : "lang-en";
    const targetBtn = document.getElementById(targetBtnId);
    if (targetBtn) {
      targetBtn.classList.add("active");
    }

    // 포스트 필터링
    filterPostsByLanguage(lang);

    // 로컬 스토리지에 사용자 선택 저장
    localStorage.setItem("preferredLanguage", lang);
  }

  // 포스트 필터링 함수
  function filterPostsByLanguage(lang) {
    const posts = document.querySelectorAll(".post-item[data-language]");

    posts.forEach((post) => {
      const postLang = post.getAttribute("data-language");
      if (postLang === lang) {
        post.classList.remove("hidden");
        post.style.display = "block";
      } else {
        post.classList.add("hidden");
        post.style.display = "none";
      }
    });
  }

  // 페이지 로드 시 실행
  document.addEventListener("DOMContentLoaded", async function () {
    const savedLanguage = localStorage.getItem("preferredLanguage");

    if (savedLanguage) {
      setLanguage(savedLanguage);
    } else {
      const detectedLang = await detectCountry();
      setLanguage(detectedLang);
    }
  });
</script>
